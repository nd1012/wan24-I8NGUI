@using BlazorPro.BlazorSize
@inherits LayoutComponentBase
@implements IDisposable
@inject IResizeListener ResizeListener
@inject IToastService ToastService
@inject IDialogService DialogService

<FluentDesignTheme StorageName=@FLUENT_UI_THEME_STORE />
<MediaQueryList>
    <FluentLayout Class="flex-grow d-flex flex-column vw-100 vh-100 m-0 p-0">
        <FluentStack Orientation=@ScreenOrientation 
                     HorizontalGap="0"
                     VerticalGap="0"
                     Class=@($"flex-grow d-flex {IfLandscape("landscape flex-row","portrait flex-column")} {IfSmallScreen("small-screen", "large-screen")} vw-100 vh-100 m-0 p-0")>
        @if (IsLandscape)
        {
            @if (IsLargeScreen)// No menu on smartphone in landscape mode to use all the available space for the main content
            {
                <FluentAppBar Id="menu" Class="vh-100 m-0 p-0">
                    <NavMenu />
                </FluentAppBar>
                <FluentDivider Class="vh-100 m-0 p-0" Orientation="Orientation.Vertical" />
            }
            <FluentBodyContent Class="flex-grow d-flex flex-column">
                @Body
            </FluentBodyContent>
        }
        else// Portrait
        {
            <FluentBodyContent Class="flex-grow d-flex flex-column">
                @Body
            </FluentBodyContent>
            <FluentDivider Class="vw-100 m-0 p-0" />
            <FluentAppBar Id="menu" Class="vw-100 m-0 p-0">
                <NavMenu />
            </FluentAppBar>
        }
        </FluentStack>
    </FluentLayout>
</MediaQueryList>
<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />

@code{
    /// <inheritdoc/>
    protected override void OnAfterRender(bool firstRender)
    {
        CurrentToastService = ToastService;
        CurrentDialogService = DialogService;
        if (firstRender)
        {
            ResizeListener.OnResized += HandleResize;
        }
        base.OnAfterRender(firstRender);
    }

    /// <inheritdoc/>
    void IDisposable.Dispose()
    {
        ResizeListener.OnResized -= HandleResize;
        CurrentDialogService = null;
        CurrentToastService = null;
    }

    /// <summary>
    /// Handle a resize event (update the razor environment and re-render, if the screen orientation/size changed)
    /// </summary>
    /// <param name="sender">Sender</param>
    /// <param name="size">Size</param>
    private void HandleResize(object? sender, BrowserWindowSize size)
    {
        bool wasLandscape = IsLandscape,
            wasSmallScreen = IsSmallScreen;
        WindowWidth = size.Width;
        WindowHeight = size.Height;
        if (Trace) WriteTrace($"Size change {size.Width}x{size.Height} was landscape {wasLandscape}, is landscape {IsLandscape}, was small screen {wasSmallScreen}, is small screen {IsSmallScreen}");
        if (wasLandscape != IsLandscape || wasSmallScreen != IsSmallScreen) StateHasChanged();
    }
}
