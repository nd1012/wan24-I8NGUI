@page "/weather"

<FluentLabel Typo="Typography.H1">Weather</FluentLabel>

<FluentLabel Typo="Typography.Body">This component demonstrates fetching data from the server.</FluentLabel>

@if (forecasts == null)
{
    <FluentLabel Typo="Typography.Body"><em>Loading...</em></FluentLabel>
}
else
{
    <FluentDataGrid Class="w-100" Items="@forecasts.AsQueryable()">
        <PropertyColumn Property="@(f => f.Date.ToLongDateString())" Title="@_("Date")" />
        <PropertyColumn Property="@(f => f.TemperatureC)" />
        <PropertyColumn Property="@(f => f.TemperatureF)" />
        <PropertyColumn Property="@(f => f.Summary)" />
    </FluentDataGrid>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
